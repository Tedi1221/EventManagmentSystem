@model Event
@using Microsoft.AspNetCore.Identity
@inject SignInManager<User> SignInManager

@{
    ViewData["Title"] = Model.Name;
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
}

<div class="card card-glassmorphism">
    <div class="card-body p-4">

        <div class="row">
            <div class="col-lg-5 mb-4 mb-lg-0">
                <img src="@(Model.ImageUrl ?? "/images/default-event.jpg")" class="img-fluid rounded" alt="@Model.Name" style="max-height: 450px; width: 100%; object-fit: cover;">
            </div>

            <div class="col-lg-7 details-content-column">
                <span class="badge bg-primary mb-2 fs-6">@Model.Category.Name</span>
                <h1 class="card-title">@Model.Name</h1>
                <hr style="border-color: var(--border-color);" />

                <p class="fs-5"><i class="fa-solid fa-calendar-days text-primary me-2"></i><strong>Дата:</strong> @Model.Date.ToString("dd MMMM yyyy, HH:mm")</p>
                <p class="fs-5"><i class="fa-solid fa-location-dot text-primary me-2"></i><strong>Място:</strong> @Model.Location</p>
                <p class="fs-5"><i class="fa-solid fa-users text-primary me-2"></i><strong>Макс. участници:</strong> @Model.MaxParticipants</p>

                <h4 class="mt-4">Описание</h4>
                <p class="card-text text-secondary">@Model.Description</p>

                @if (SignInManager.IsSignedIn(User))
                {
                    <hr style="border-color: var(--border-color); margin-top: 2rem;" />
                    <h4 class="mt-4">Чат на живо</h4>
                    <div class="card mt-3" style="background: rgba(0,0,0,0.2); border-color: var(--border-color);">
                        <div class="card-body">
                            <ul id="messagesList" class="list-unstyled" style="max-height: 200px; overflow-y: auto; padding-right: 10px;"></ul>
                        </div>
                        <div class="card-footer d-flex p-2" style="background: none; border-top: 1px solid var(--border-color);">
                            <input type="text" id="messageInput" class="form-control me-2" placeholder="Напиши съобщение..." />
                            <button type="button" id="sendButton" class="uiverse-btn" style="padding: 0.5em 1em;"><i class="fa fa-paper-plane"></i></button>
                        </div>
                    </div>
                }

                <div class="d-flex justify-content-between align-items-center mt-5">
                    <div>
                        <span class="h2 fw-bold" style="color: var(--primary-accent);">@Model.Price.ToString("C")</span>
                    </div>
                    <div class="d-flex align-items-center flex-wrap">
                        @if (SignInManager.IsSignedIn(User))
                        {
                            if (!User.IsInRole("Administrator"))
                            {
                                <form asp-controller="Event" asp-action="Register" method="post" class="me-2">
                                    <input type="hidden" name="eventId" value="@Model.Id" />
                                    <button type="submit" class="uiverse-btn">Запиши се</button>
                                </form>
                            }
                        }
                        else
                        {
                            <a asp-controller="Account" asp-action="Login" asp-route-returnUrl="@Context.Request.Path" class="uiverse-btn me-2">Запиши се</a>
                        }

                        @if (User.IsInRole("Administrator"))
                        {
                            <a asp-area="Admin" asp-controller="AdminEvent" asp-action="Edit" asp-route-id="@Model.Id" class="uiverse-btn-secondary me-2">Редактирай</a>
                            <a asp-area="Admin" asp-controller="AdminEvent" asp-action="Delete" asp-route-id="@Model.Id" class="uiverse-btn-secondary me-2">Изтрий</a>
                        }
                        <a asp-action="Index" class="uiverse-btn-secondary">Обратно</a>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

@section Scripts {
    @if (SignInManager.IsSignedIn(User))
    {
        <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
        <script>
            document.addEventListener("DOMContentLoaded", function () {
                const chatElements = {
                    connection: new signalR.HubConnectionBuilder().withUrl("/chatHub").build(),
                    sendButton: document.getElementById("sendButton"),
                    messageInput: document.getElementById("messageInput"),
                    messagesList: document.getElementById("messagesList")
                };

                if (chatElements.sendButton) {
                    chatElements.sendButton.disabled = true;

                    chatElements.connection.on("ReceiveMessage", function (user, message) {
                        const li = document.createElement("li");
                        li.style.color = "var(--text-primary)";
                        li.innerHTML = `<strong>${user}:</strong> ${message.replace(/</g, "&lt;").replace(/>/g, "&gt;")}`;
                        chatElements.messagesList.appendChild(li);
                        chatElements.messagesList.scrollTop = chatElements.messagesList.scrollHeight;
                    });

                    chatElements.connection.start().then(function () {
                        chatElements.sendButton.disabled = false;
                        chatElements.connection.invoke("AddToGroup", "@Model.Id").catch(err => console.error(err.toString()));
                    }).catch(err => console.error(err.toString()));

                    function sendMessage() {
                        const message = chatElements.messageInput.value;
                        if (message.trim() === "") return;
                        chatElements.connection.invoke("SendMessageToGroup", "@Model.Id", message).then(() => {
                            chatElements.messageInput.value = "";
                        }).catch(err => console.error(err.toString()));
                    }

                    chatElements.sendButton.addEventListener("click", event => {
                        sendMessage();
                        event.preventDefault();
                    });

                    chatElements.messageInput.addEventListener("keypress", event => {
                        if (event.key === "Enter") {
                            event.preventDefault();
                            sendMessage();
                        }
                    });
                }
            });
        </script>
    }
}